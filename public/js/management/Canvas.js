class Canvas {
    constructor(app, {type = 0, guide = true, boothList = []} = {}){
        /* JSON init
        */
        this.road1 = [
            [1, 19], [2, 19], [3, 19], [4, 19], [5, 19], [6, 19], [7, 19], [8, 19], [9, 19], [10, 19], [11, 19], [12, 19], [13, 19], [14, 19], [15, 19], [16, 19], [17, 19], [18, 19], [19, 19], [20, 19], [21, 19], [22, 19], [23, 19], [24, 19], [25, 19], [26, 19], [27, 19], [28, 19], [29, 19], [30, 19], [31, 19], [32, 19], [33, 19], [34, 19], [35, 19], [36, 19], [37, 19], [38, 19], [39, 19], [40, 19], [41, 19], [42, 19], [43, 19], [44, 19], [45, 19], [46, 19], [47, 19], [48, 19], [49, 19], [50, 19], [51, 19], [52, 19], [53, 19],
            [1, 20], [2, 20], [3, 20], [4, 20], [5, 20], [6, 20], [7, 20], [8, 20], [9, 20], [10, 20], [11, 20], [12, 20], [13, 20], [14, 20], [15, 20], [16, 20], [17, 20], [18, 20], [19, 20], [20, 20], [21, 20], [22, 20], [23, 20], [24, 20], [25, 20], [26, 20], [27, 20], [28, 20], [29, 20], [30, 20], [31, 20], [32, 20], [33, 20], [34, 20], [35, 20], [36, 20], [37, 20], [38, 20], [39, 20], [40, 20], [41, 20], [42, 20], [43, 20], [44, 20], [45, 20], [46, 20], [47, 20], [48, 20], [49, 20], [50, 20], [51, 20], [52, 20], [53, 20],
            [1, 21], [2, 21], [3, 21], [4, 21], [5, 21], [6, 21], [7, 21], [8, 21], [9, 21], [10, 21], [11, 21], [12, 21], [13, 21], [14, 21], [15, 21], [16, 21], [17, 21], [18, 21], [19, 21], [20, 21], [21, 21], [22, 21], [23, 21], [24, 21], [25, 21], [26, 21], [27, 21], [28, 21], [29, 21], [30, 21], [31, 21], [32, 21], [33, 21], [34, 21], [35, 21], [36, 21], [37, 21], [38, 21], [39, 21], [40, 21], [41, 21], [42, 21], [43, 21], [44, 21], [45, 21], [46, 21], [47, 21], [48, 21], [49, 21], [50, 21], [51, 21], [52, 21], [53, 21],
            [1, 22], [2, 22], [3, 22], [4, 22], [5, 22], [6, 22], [7, 22], [8, 22], [9, 22], [10, 22], [11, 22], [12, 22], [13, 22], [14, 22], [15, 22], [16, 22], [17, 22], [18, 22], [19, 22], [20, 22], [21, 22], [22, 22], [23, 22], [24, 22], [25, 22], [26, 22], [27, 22], [28, 22], [29, 22], [30, 22], [31, 22], [32, 22], [33, 22], [34, 22], [35, 22], [36, 22], [37, 22], [38, 22], [39, 22], [40, 22], [41, 22], [42, 22], [43, 22], [44, 22], [45, 22], [46, 22], [47, 22], [48, 22], [49, 22], [50, 22], [51, 22], [52, 22], [53, 22],
            [54, 1], [54, 2], [54, 3], [54, 4], [54, 5], [54, 6], [54, 7], [54, 8], [54, 9], [54, 10], [54, 11], [54, 12], [54, 13], [54, 14], [54, 15], [54, 16], [54, 17], [54, 18], [54, 19], [54, 20], [54, 21], [54, 22], [54, 23], [54, 24], [54, 25], [54, 26], [54, 27], [54, 28], [54, 29], [54, 30], [54, 31], [54, 32], [54, 33], [54, 34], [54, 35], [54, 36], [54, 37], [54, 38], [54, 39], [54, 40],
            [55, 1], [55, 2], [55, 3], [55, 4], [55, 5], [55, 6], [55, 7], [55, 8], [55, 9], [55, 10], [55, 11], [55, 12], [55, 13], [55, 14], [55, 15], [55, 16], [55, 17], [55, 18], [55, 19], [55, 20], [55, 21], [55, 22], [55, 23], [55, 24], [55, 25], [55, 26], [55, 27], [55, 28], [55, 29], [55, 30], [55, 31], [55, 32], [55, 33], [55, 34], [55, 35], [55, 36], [55, 37], [55, 38], [55, 39], [55, 40],
            [56, 1], [56, 2], [56, 3], [56, 4], [56, 5], [56, 6], [56, 7], [56, 8], [56, 9], [56, 10], [56, 11], [56, 12], [56, 13], [56, 14], [56, 15], [56, 16], [56, 17], [56, 18], [56, 19], [56, 20], [56, 21], [56, 22], [56, 23], [56, 24], [56, 25], [56, 26], [56, 27], [56, 28], [56, 29], [56, 30], [56, 31], [56, 32], [56, 33], [56, 34], [56, 35], [56, 36], [56, 37], [56, 38], [56, 39], [56, 40],
            [57, 1], [57, 2], [57, 3], [57, 4], [57, 5], [57, 6], [57, 7], [57, 8], [57, 9], [57, 10], [57, 11], [57, 12], [57, 13], [57, 14], [57, 15], [57, 16], [57, 17], [57, 18], [57, 19], [57, 20], [57, 21], [57, 22], [57, 23], [57, 24], [57, 25], [57, 26], [57, 27], [57, 28], [57, 29], [57, 30], [57, 31], [57, 32], [57, 33], [57, 34], [57, 35], [57, 36], [57, 37], [57, 38], [57, 39], [57, 40]
        ];
        this.road2 = [
            [1, 19], [2, 19], [3, 19], [4, 19], [5, 19], [6, 19], [7, 19], [8, 19], [9, 19], [10, 19], [11, 19], [12, 19], [13, 19], [14, 19], [15, 19], [16, 19], [17, 19], [18, 19], [19, 19], [20, 19], [21, 19], [22, 19], [23, 19], [24, 19], [25, 19], [26, 19], [27, 19], [28, 19], [29, 19], [30, 19], [31, 19], [32, 19], [33, 19], [34, 19], [35, 19], [36, 19], [37, 19], [38, 19], [39, 19], [40, 19], [41, 19], [42, 19], [43, 19], [44, 19], [45, 19], [46, 19], [47, 19], [48, 19], [49, 19], [50, 19], [51, 19], [52, 19], [53, 19], [54, 19], [55, 19], [56, 19], [57, 19], [58, 19], [59, 19], [60, 19], [61, 19], [62, 19], [63, 19], [64, 19], [65, 19], [66, 19], [67, 19], [68, 19], [69, 19], [70, 19], [71, 19], [72, 19], [73, 19], [74, 19], [75, 19], [76, 19], [77, 19], [78, 19], [79, 19], [80, 19], 
            [1, 20], [2, 20], [3, 20], [4, 20], [5, 20], [6, 20], [7, 20], [8, 20], [9, 20], [10, 20], [11, 20], [12, 20], [13, 20], [14, 20], [15, 20], [16, 20], [17, 20], [18, 20], [19, 20], [20, 20], [21, 20], [22, 20], [23, 20], [24, 20], [25, 20], [26, 20], [27, 20], [28, 20], [29, 20], [30, 20], [31, 20], [32, 20], [33, 20], [34, 20], [35, 20], [36, 20], [37, 20], [38, 20], [39, 20], [40, 20], [41, 20], [42, 20], [43, 20], [44, 20], [45, 20], [46, 20], [47, 20], [48, 20], [49, 20], [50, 20], [51, 20], [52, 20], [53, 20], [54, 20], [55, 20], [56, 20], [57, 20], [58, 20], [59, 20], [60, 20], [61, 20], [62, 20], [63, 20], [64, 20], [65, 20], [66, 20], [67, 20], [68, 20], [69, 20], [70, 20], [71, 20], [72, 20], [73, 20], [74, 20], [75, 20], [76, 20], [77, 20], [78, 20], [79, 20], [80, 20], 
            [1, 21], [2, 21], [3, 21], [4, 21], [5, 21], [6, 21], [7, 21], [8, 21], [9, 21], [10, 21], [11, 21], [12, 21], [13, 21], [14, 21], [15, 21], [16, 21], [17, 21], [18, 21], [19, 21], [20, 21], [21, 21], [22, 21], [23, 21], [24, 21], [25, 21], [26, 21], [27, 21], [28, 21], [29, 21], [30, 21], [31, 21], [32, 21], [33, 21], [34, 21], [35, 21], [36, 21], [37, 21], [38, 21], [39, 21], [40, 21], [41, 21], [42, 21], [43, 21], [44, 21], [45, 21], [46, 21], [47, 21], [48, 21], [49, 21], [50, 21], [51, 21], [52, 21], [53, 21], [54, 21], [55, 21], [56, 21], [57, 21], [58, 21], [59, 21], [60, 21], [61, 21], [62, 21], [63, 21], [64, 21], [65, 21], [66, 21], [67, 21], [68, 21], [69, 21], [70, 21], [71, 21], [72, 21], [73, 21], [74, 21], [75, 21], [76, 21], [77, 21], [78, 21], [79, 21], [80, 21], 
            [1, 22], [2, 22], [3, 22], [4, 22], [5, 22], [6, 22], [7, 22], [8, 22], [9, 22], [10, 22], [11, 22], [12, 22], [13, 22], [14, 22], [15, 22], [16, 22], [17, 22], [18, 22], [19, 22], [20, 22], [21, 22], [22, 22], [23, 22], [24, 22], [25, 22], [26, 22], [27, 22], [28, 22], [29, 22], [30, 22], [31, 22], [32, 22], [33, 22], [34, 22], [35, 22], [36, 22], [37, 22], [38, 22], [39, 22], [40, 22], [41, 22], [42, 22], [43, 22], [44, 22], [45, 22], [46, 22], [47, 22], [48, 22], [49, 22], [50, 22], [51, 22], [52, 22], [53, 22], [54, 22], [55, 22], [56, 22], [57, 22], [58, 22], [59, 22], [60, 22], [61, 22], [62, 22], [63, 22], [64, 22], [65, 22], [66, 22], [67, 22], [68, 22], [69, 22], [70, 22], [71, 22], [72, 22], [73, 22], [74, 22], [75, 22], [76, 22], [77, 22], [78, 22], [79, 22], [80, 22], 
            [24, 1], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 7], [24, 8], [24, 9], [24, 10], [24, 11], [24, 12], [24, 13], [24, 14], [24, 15], [24, 16], [24, 17], [24, 18], [24, 19], [24, 20], [24, 21], [24, 22], [24, 23], [24, 24], [24, 25], [24, 26], [24, 27], [24, 28], [24, 29], [24, 30], [24, 31], [24, 32], [24, 33], [24, 34], [24, 35], [24, 36], [24, 37], [24, 38], [24, 39], [24, 40],
            [25, 1], [25, 2], [25, 3], [25, 4], [25, 5], [25, 6], [25, 7], [25, 8], [25, 9], [25, 10], [25, 11], [25, 12], [25, 13], [25, 14], [25, 15], [25, 16], [25, 17], [25, 18], [25, 19], [25, 20], [25, 21], [25, 22], [25, 23], [25, 24], [25, 25], [25, 26], [25, 27], [25, 28], [25, 29], [25, 30], [25, 31], [25, 32], [25, 33], [25, 34], [25, 35], [25, 36], [25, 37], [25, 38], [25, 39], [25, 40],
            [26, 1], [26, 2], [26, 3], [26, 4], [26, 5], [26, 6], [26, 7], [26, 8], [26, 9], [26, 10], [26, 11], [26, 12], [26, 13], [26, 14], [26, 15], [26, 16], [26, 17], [26, 18], [26, 19], [26, 20], [26, 21], [26, 22], [26, 23], [26, 24], [26, 25], [26, 26], [26, 27], [26, 28], [26, 29], [26, 30], [26, 31], [26, 32], [26, 33], [26, 34], [26, 35], [26, 36], [26, 37], [26, 38], [26, 39], [26, 40],
            [27, 1], [27, 2], [27, 3], [27, 4], [27, 5], [27, 6], [27, 7], [27, 8], [27, 9], [27, 10], [27, 11], [27, 12], [27, 13], [27, 14], [27, 15], [27, 16], [27, 17], [27, 18], [27, 19], [27, 20], [27, 21], [27, 22], [27, 23], [27, 24], [27, 25], [27, 26], [27, 27], [27, 28], [27, 29], [27, 30], [27, 31], [27, 32], [27, 33], [27, 34], [27, 35], [27, 36], [27, 37], [27, 38], [27, 39], [27, 40],
            [54, 1], [54, 2], [54, 3], [54, 4], [54, 5], [54, 6], [54, 7], [54, 8], [54, 9], [54, 10], [54, 11], [54, 12], [54, 13], [54, 14], [54, 15], [54, 16], [54, 17], [54, 18], [54, 19], [54, 20], [54, 21], [54, 22], [54, 23], [54, 24], [54, 25], [54, 26], [54, 27], [54, 28], [54, 29], [54, 30], [54, 31], [54, 32], [54, 33], [54, 34], [54, 35], [54, 36], [54, 37], [54, 38], [54, 39], [54, 40],
            [55, 1], [55, 2], [55, 3], [55, 4], [55, 5], [55, 6], [55, 7], [55, 8], [55, 9], [55, 10], [55, 11], [55, 12], [55, 13], [55, 14], [55, 15], [55, 16], [55, 17], [55, 18], [55, 19], [55, 20], [55, 21], [55, 22], [55, 23], [55, 24], [55, 25], [55, 26], [55, 27], [55, 28], [55, 29], [55, 30], [55, 31], [55, 32], [55, 33], [55, 34], [55, 35], [55, 36], [55, 37], [55, 38], [55, 39], [55, 40],
            [56, 1], [56, 2], [56, 3], [56, 4], [56, 5], [56, 6], [56, 7], [56, 8], [56, 9], [56, 10], [56, 11], [56, 12], [56, 13], [56, 14], [56, 15], [56, 16], [56, 17], [56, 18], [56, 19], [56, 20], [56, 21], [56, 22], [56, 23], [56, 24], [56, 25], [56, 26], [56, 27], [56, 28], [56, 29], [56, 30], [56, 31], [56, 32], [56, 33], [56, 34], [56, 35], [56, 36], [56, 37], [56, 38], [56, 39], [56, 40],
            [57, 1], [57, 2], [57, 3], [57, 4], [57, 5], [57, 6], [57, 7], [57, 8], [57, 9], [57, 10], [57, 11], [57, 12], [57, 13], [57, 14], [57, 15], [57, 16], [57, 17], [57, 18], [57, 19], [57, 20], [57, 21], [57, 22], [57, 23], [57, 24], [57, 25], [57, 26], [57, 27], [57, 28], [57, 29], [57, 30], [57, 31], [57, 32], [57, 33], [57, 34], [57, 35], [57, 36], [57, 37], [57, 38], [57, 39], [57, 40]
        ];
        this.road3 = [
            [1, 27], [2, 27], [3, 27], [4, 27], [5, 27], [6, 27], [7, 27], [8, 27], [9, 27], [10, 27], [11, 27], [12, 27], [13, 27], [14, 27], [15, 27], [16, 27], [17, 27], [18, 27], [19, 27], [20, 27], [21, 27], [22, 27], [23, 27], [24, 27], [25, 27], [26, 27], [27, 27], [28, 27], [29, 27], [30, 27], [31, 27], [32, 27], [33, 27], [34, 27], [35, 27], [36, 27], [37, 27], [38, 27], [39, 27], [40, 27], [41, 27], [42, 27], [43, 27], [44, 27], [45, 27], [46, 27], [47, 27], [48, 27], [49, 27], [50, 27], [51, 27], [52, 27], [53, 27], [54, 27], [55, 27], [56, 27], [57, 27], [58, 27], [59, 27], [60, 27], [61, 27], [62, 27], [63, 27], [64, 27], [65, 27], [66, 27], [67, 27], [68, 27], [69, 27], [70, 27], [71, 27], [72, 27], [73, 27], [74, 27], [75, 27], [76, 27], [77, 27], [78, 27], [79, 27], [80, 27], 
            [1, 28], [2, 28], [3, 28], [4, 28], [5, 28], [6, 28], [7, 28], [8, 28], [9, 28], [10, 28], [11, 28], [12, 28], [13, 28], [14, 28], [15, 28], [16, 28], [17, 28], [18, 28], [19, 28], [20, 28], [21, 28], [22, 28], [23, 28], [24, 28], [25, 28], [26, 28], [27, 28], [28, 28], [29, 28], [30, 28], [31, 28], [32, 28], [33, 28], [34, 28], [35, 28], [36, 28], [37, 28], [38, 28], [39, 28], [40, 28], [41, 28], [42, 28], [43, 28], [44, 28], [45, 28], [46, 28], [47, 28], [48, 28], [49, 28], [50, 28], [51, 28], [52, 28], [53, 28], [54, 28], [55, 28], [56, 28], [57, 28], [58, 28], [59, 28], [60, 28], [61, 28], [62, 28], [63, 28], [64, 28], [65, 28], [66, 28], [67, 28], [68, 28], [69, 28], [70, 28], [71, 28], [72, 28], [73, 28], [74, 28], [75, 28], [76, 28], [77, 28], [78, 28], [79, 28], [80, 28], 
            [1, 29], [2, 29], [3, 29], [4, 29], [5, 29], [6, 29], [7, 29], [8, 29], [9, 29], [10, 29], [11, 29], [12, 29], [13, 29], [14, 29], [15, 29], [16, 29], [17, 29], [18, 29], [19, 29], [20, 29], [21, 29], [22, 29], [23, 29], [24, 29], [25, 29], [26, 29], [27, 29], [28, 29], [29, 29], [30, 29], [31, 29], [32, 29], [33, 29], [34, 29], [35, 29], [36, 29], [37, 29], [38, 29], [39, 29], [40, 29], [41, 29], [42, 29], [43, 29], [44, 29], [45, 29], [46, 29], [47, 29], [48, 29], [49, 29], [50, 29], [51, 29], [52, 29], [53, 29], [54, 29], [55, 29], [56, 29], [57, 29], [58, 29], [59, 29], [60, 29], [61, 29], [62, 29], [63, 29], [64, 29], [65, 29], [66, 29], [67, 29], [68, 29], [69, 29], [70, 29], [71, 29], [72, 29], [73, 29], [74, 29], [75, 29], [76, 29], [77, 29], [78, 29], [79, 29], [80, 29], 
            [1, 30], [2, 30], [3, 30], [4, 30], [5, 30], [6, 30], [7, 30], [8, 30], [9, 30], [10, 30], [11, 30], [12, 30], [13, 30], [14, 30], [15, 30], [16, 30], [17, 30], [18, 30], [19, 30], [20, 30], [21, 30], [22, 30], [23, 30], [24, 30], [25, 30], [26, 30], [27, 30], [28, 30], [29, 30], [30, 30], [31, 30], [32, 30], [33, 30], [34, 30], [35, 30], [36, 30], [37, 30], [38, 30], [39, 30], [40, 30], [41, 30], [42, 30], [43, 30], [44, 30], [45, 30], [46, 30], [47, 30], [48, 30], [49, 30], [50, 30], [51, 30], [52, 30], [53, 30], [54, 30], [55, 30], [56, 30], [57, 30], [58, 30], [59, 30], [60, 30], [61, 30], [62, 30], [63, 30], [64, 30], [65, 30], [66, 30], [67, 30], [68, 30], [69, 30], [70, 30], [71, 30], [72, 30], [73, 30], [74, 30], [75, 30], [76, 30], [77, 30], [78, 30], [79, 30], [80, 30],
            [39, 1], [39, 2], [39, 3], [39, 4], [39, 5], [39, 6], [39, 7], [39, 8], [39, 9], [39, 10], [39, 11], [39, 12], [39, 13], [39, 14], [39, 15], [39, 16], [39, 17], [39, 18], [39, 19], [39, 20], [39, 21], [39, 22], [39, 23], [39, 24], [39, 25], [39, 26], [39, 27], [39, 28], [39, 29], [39, 30], [39, 31], [39, 32], [39, 33], [39, 34], [39, 35], [39, 36], [39, 37], [39, 38], [39, 39], [39, 40],
            [40, 1], [40, 2], [40, 3], [40, 4], [40, 5], [40, 6], [40, 7], [40, 8], [40, 9], [40, 10], [40, 11], [40, 12], [40, 13], [40, 14], [40, 15], [40, 16], [40, 17], [40, 18], [40, 19], [40, 20], [40, 21], [40, 22], [40, 23], [40, 24], [40, 25], [40, 26], [40, 27], [40, 28], [40, 29], [40, 30], [40, 31], [40, 32], [40, 33], [40, 34], [40, 35], [40, 36], [40, 37], [40, 38], [40, 39], [40, 40],
            [41, 1], [41, 2], [41, 3], [41, 4], [41, 5], [41, 6], [41, 7], [41, 8], [41, 9], [41, 10], [41, 11], [41, 12], [41, 13], [41, 14], [41, 15], [41, 16], [41, 17], [41, 18], [41, 19], [41, 20], [41, 21], [41, 22], [41, 23], [41, 24], [41, 25], [41, 26], [41, 27], [41, 28], [41, 29], [41, 30], [41, 31], [41, 32], [41, 33], [41, 34], [41, 35], [41, 36], [41, 37], [41, 38], [41, 39], [41, 40],
            [42, 1], [42, 2], [42, 3], [42, 4], [42, 5], [42, 6], [42, 7], [42, 8], [42, 9], [42, 10], [42, 11], [42, 12], [42, 13], [42, 14], [42, 15], [42, 16], [42, 17], [42, 18], [42, 19], [42, 20], [42, 21], [42, 22], [42, 23], [42, 24], [42, 25], [42, 26], [42, 27], [42, 28], [42, 29], [42, 30], [42, 31], [42, 32], [42, 33], [42, 34], [42, 35], [42, 36], [42, 37], [42, 38], [42, 39], [42, 40],
            [60, 1], [60, 2], [60, 3], [60, 4], [60, 5], [60, 6], [60, 7], [60, 8], [60, 9], [60, 10], [60, 11], [60, 12], [60, 13], [60, 14], [60, 15], [60, 16], [60, 17], [60, 18], [60, 19], [60, 20], [60, 21], [60, 22], [60, 23], [60, 24], [60, 25], [60, 26], [60, 27],
            [61, 1], [61, 2], [61, 3], [61, 4], [61, 5], [61, 6], [61, 7], [61, 8], [61, 9], [61, 10], [61, 11], [61, 12], [61, 13], [61, 14], [61, 15], [61, 16], [61, 17], [61, 18], [61, 19], [61, 20], [61, 21], [61, 22], [61, 23], [61, 24], [61, 25], [61, 26], [61, 27],
            [62, 1], [62, 2], [62, 3], [62, 4], [62, 5], [62, 6], [62, 7], [62, 8], [62, 9], [62, 10], [62, 11], [62, 12], [62, 13], [62, 14], [62, 15], [62, 16], [62, 17], [62, 18], [62, 19], [62, 20], [62, 21], [62, 22], [62, 23], [62, 24], [62, 25], [62, 26], [62, 27],
            [63, 1], [63, 2], [63, 3], [63, 4], [63, 5], [63, 6], [63, 7], [63, 8], [63, 9], [63, 10], [63, 11], [63, 12], [63, 13], [63, 14], [63, 15], [63, 16], [63, 17], [63, 18], [63, 19], [63, 20], [63, 21], [63, 22], [63, 23], [63, 24], [63, 25], [63, 26], [63, 27]
        ];

        this.app = app;
        this.guideRect = {x: 0, y: 0, width: 0, height: 0};
        this.$root = document.createElement("canvas");
        this.ctx = this.$root.getContext("2d");
        
        this.WIDTH = 80;
        this.HEIGHT = 40;
        this.type = type;
        this.guide = guide;
        this.COLORS = { black: "#505050", gray: "#A5A5A5", lightblue: "#3e65e6aa" }


        
        this.calcSize();
        this.boothList = boothList ? boothList.map(booth => new Booth(this, booth)) : [];

        this.mouseEvent();
        this.otherEvent();
        this.update();
    }

    /**
     * 캔버스 내 사이즈들을 재계산한다.
     */
    calcSize(){
        this.BL_MARGIN = { top: this.guide ? 3 : 1, left: this.guide ? 3 : 1, bottom: 1, right: 1 };

        this.outerWidth = (this.WIDTH + this.BL_MARGIN.left + this.BL_MARGIN.right);
        this.outerHeight = (this.HEIGHT + this.BL_MARGIN.top + this.BL_MARGIN.bottom);

        this.$root.width = this.app.$contents.offsetWidth;
        this.BLOCK = this.$root.width / this.outerWidth;
        this.$root.height = this.BLOCK * this.outerHeight;

        this.MARGIN = Object.keys(this.BL_MARGIN).reduce((p, c) => {
            p[c] = this.bl2px(this.BL_MARGIN[c]);
            return p;
        }, {});
        this.gridWidth = this.$root.width - this.MARGIN.left - this.MARGIN.right;
        this.gridHeight = this.$root.height - this.MARGIN.top - this.MARGIN.bottom;

        
        this.boothList && this.boothList.forEach(item => {
            item.x = this.bl2px(item.bl_x, "round");
            item.y = this.bl2px(item.bl_y, "round");
            item.width = this.bl2px(item.bl_w, "round");
            item.height = this.bl2px(item.bl_h, "round");
        });
    }

    /**
     * 픽셀을 블럭 단위로 변경한다.
     * ("floor": 우측 하단 | "ceil": 좌측 상단 | "round": 위치마다 반올림)
     * @param {number} block 
     * @param {string} 기준점을 변경할 수 있다. 
     */
    px2bl(pixel, method = "ceil"){
        return Math[method](pixel / this.BLOCK);
    }
    /**
     * 블럭을 픽셀 단위로 변경한다.  
     * ("floor": 우측 하단 | "ceil": 좌측 상단 | "round": 위치마다 반올림)
     * @param {number} block 
     * @param {string} 기준점을 변경할 수 있다. 
     */
    bl2px(block, method = "floor"){
        return Math[method](block) * this.BLOCK;
    }

    /**
     * 격자에 맞춰 값을 반환한다.
     * @param {number} pixel pixel 단위의 값
     */
    getContain(pixel, mathing = "floor"){
        return Math[mathing](pixel / this.BLOCK) * this.BLOCK;
    }

    /**
     * 해당 좌표의 블럭을 색칠한다.
     * @param {number} x X값
     * @param {number} y Y값
     */
    fillBlock(x, y, fillStyle = this.app.selectedColor ? this.app.selectedColor : this.COLORS.gray){
        this.ctx.save();
        this.ctx.fillStyle = fillStyle;
        x = this.MARGIN.left + this.bl2px(x - 1);
        y = this.MARGIN.top  + this.bl2px(y - 1);
        this.ctx.fillRect(x, y, this.bl2px(1), this.bl2px(1));
        this.ctx.restore();
    }

    /**
     * 사각형을 그린다.
     * @param {object} param0 
     */
    fillRect({
        x = 0, y = 0, width = 0, height = 0, 
        text = this.app.selected, 
        color = this.app.selectedColor,
        opacity = 0.5,
    } = {}){
        let {top, left} = this.MARGIN;

        this.ctx.save();
        this.ctx.fillStyle = color;
        this.ctx.globalAlpha = opacity;
        this.ctx.fillRect(left + x, top + y, width, height);
        this.ctx.fill();

        if(this.guide){
            this.ctx.fillStyle = "#fff";
            this.ctx.font = "1em 나눔스퀘어";
    
            let measure = this.ctx.measureText(text);
            x = left + x + width / 2 - measure.width / 2;
            y = top + y + height / 2 + 3;
            this.ctx.fillText(text, x, y);
        }


        this.ctx.restore();
    }



    /**
     * 해당 캔버스를 기준으로 한 X, Y값을 반환한다. (그리드 마진은 제거한다)
     * @param {Event} param0 
     */
    takeXY({pageX, pageY}){
        let {top, left} = $(this.$root).offset();
        let X = pageX - left - this.MARGIN.left;
        X = X < 0 ? 0 : X > this.gridWidth ? this.gridWidth : X;
        let Y = pageY - top - this.MARGIN.top;
        Y = Y < 0 ? 0 : Y > this.gridHeight ? this.gridHeight : Y;
        return [X, Y];
    }

    /**
     * 해당 캔버스를 이미지 노드로 변경해 반환한다.
     */
    toImage(closeable = true){
        let temp = this.guide;
        this.guide = false;

        this.calcSize();
        this.update();

        let img = document.createElement("div");
        img.classList.add("img");
        img.innerHTML = `<img src="${this.$root.toDataURL("image/png")}" alt="boot-image">`;
        img.innerHTML += closeable ? `<button class="close-btn">×</button>` : "";

        this.guide = temp;

        this.calcSize();
        this.update();
        return img;
    }


    /**
     * 캔버스를 업데이트 시킨다.
     * @param {CanvasContext} ctx 
     */
    update(){
        if(this.app.current === this){
            let active = this.boothList.find(item => this.app.selected === item.text);
            this.app.$outSize.innerText = active ? active.bl_w * active.bl_h : 0;
        }

        this.ctx.fillStyle = "#ffffff";
        this.ctx.fillRect(0, 0, this.$root.width, this.$root.height);

        
        // Grid
        this.prepareGrid();

        // Road
        this.type === 0 || this.prepareRoad();

        // 보유한 부스들
        this.boothList.forEach(booth => {
            this.fillRect(booth);
        });

        // 가이드 선
        this.fillRect(this.guideRect);
        
        this.updateFrame = requestAnimationFrame(() => {
            this.update();
        });
    }

    /**
     * type에 따라 도보를 그린다.
     */
    prepareRoad(){
        let map = this['road' + this.type];
        map.forEach(path => {
            let [X, Y] = path;
            this.fillBlock(X, Y, this.COLORS.black);
        });
    }

    /**
     * 밑 Grid를 그린다.
     */
    prepareGrid(){
        let {ctx} = this;
        let {left, top} = this.MARGIN;

        ctx.save();

        ctx.fillStyle = ctx.strokeStyle = this.COLORS.gray;
        ctx.font = "0.6em 나눔스퀘어";

        ctx.strokeRect(left, top, this.gridWidth, this.gridHeight);

        if(this.guide == false) return;

        let measure;
        measure = ctx.measureText(this.WIDTH);
        ctx.fillText("0", left - 15, top - 10);
        ctx.fillText(this.WIDTH, left + this.gridWidth - measure.width, top - 10);
        for(let x = 1; x < this.WIDTH; x++){
            let X = this.bl2px(x);
            if(x % 5 === 0) {
                ctx.lineWidth = "1";
                measure = ctx.measureText(x);
                ctx.fillText(x, left + X - measure.width, top - 10);
            }
            else ctx.lineWidth = "0.5";
            ctx.beginPath();
            ctx.moveTo(left + X, top);
            ctx.lineTo(left + X, top + this.gridHeight);
            ctx.stroke();
        }

        measure = ctx.measureText(this.HEIGHT);
        ctx.fillText(this.HEIGHT, left + - measure.width - 10, top + this.gridHeight);
        for(let y = 1; y < this.HEIGHT; y++){
            let Y = this.bl2px(y);
            if(y % 5 === 0) {
                ctx.lineWidth = "1";
                measure = ctx.measureText(y);
                ctx.fillText(y, left - measure.width - 10, top + Y - 2);
            }
            else ctx.lineWidth = "0.5";
            ctx.beginPath();
            ctx.moveTo(left, top + Y);
            ctx.lineTo(left + this.gridWidth, top + Y);
            ctx.stroke();
        }

        ctx.restore();
    }

    /**
     * 마우스 이벤트를 건다.
     */
    mouseEvent(){
        this.$root.addEventListener("dragstart", e => {
            e.preventDefault();
        })

        let temp, offset;
        let moveTarget = null;
        this.$root.addEventListener("mousedown", e => {
            let [x, y] = temp = this.takeXY(e);
            moveTarget = this.boothList.find(item => item.include({x, y}));
            offset = moveTarget ? [ x - moveTarget.x, y - moveTarget.y] : [];
            
            if(!moveTarget && !this.app.selected){
                temp = null;
                return toast("부스를 먼저 선택해 주세요!", "bg-danger");    
            }
            else if(moveTarget) {
                let changeEvent = new InputEvent("change");
                this.app.$selBooth.querySelector("option[value='"+ moveTarget.text +"']").selected = true;
                this.app.$selBooth.dispatchEvent(changeEvent);
            }
        });

        window.addEventListener("mousemove", e => {
            if(!temp || e.which !== 1) return;

            let [x, y] = temp;
            let [ox, oy] = offset;
            let [mx, my] = this.takeXY(e);

            // 기존 부스 이동
            if(moveTarget){
                let X = this.getContain(mx - ox);
                let Y = this.getContain(my - oy);

                moveTarget.x = X < 0 ? 0 : X + moveTarget.width > this.gridWidth ? this.gridWidth - moveTarget.width : X;
                moveTarget.y = Y < 0 ? 0 : Y + moveTarget.height > this.gridHeight ? this.gridHeight - moveTarget.height : Y;
            }
            // 새로운 부스 생성
            else {
    
                let X = this.guideRect.x = this.getContain(Math.min(x, mx), "floor");
                let Y = this.guideRect.y = this.getContain(Math.min(y, my), "floor");
                this.guideRect.width = this.getContain(Math.max(x, mx), "ceil") - X;
                this.guideRect.height = this.getContain(Math.max(y, my), "ceil") - Y;
            }
        });
        // 부스 생성
        window.addEventListener("mouseup", e => {
            if(!temp || e.which !== 1 || moveTarget) return;


            let _guideRect = this.guideRect 
            this.guideRect = {};
            temp = null;

            if(!_guideRect.width || !_guideRect.height || _guideRect.width < this.BLOCK * 1.5 || _guideRect.height < this.BLOCK * 1.5){
                toast("부스는 2×2 보다 커야합니다.");
                return;
            }
            
            // 같은 부스가 있는지
            let exist = this.boothList.findIndex(x => x.text === this.app.selected);
            if(exist >= 0){
                this.boothList.splice(exist, 1);   
                this.app.$outSize.innerText = 0;
            }
            
            
            // 객체 생성
            let {x, y, width, height} = _guideRect;
            let bl_x = this.px2bl(x, "round");
            let bl_y = this.px2bl(y, "round");
            let bl_w = this.px2bl(width, "round");
            let bl_h = this.px2bl(height, "round");

            console.log(width / this.BLOCK, bl_w);
            
            let new_booth = new Booth(this, {
                text: this.app.selected,
                bl_x, bl_y, bl_w, bl_h
            });
            
            if(new_booth.check(_guideRect)){
                this.boothList.push(new_booth);
                this.app.$outSize.innerText = new_booth.bl_w * new_booth.bl_h;
                this.app.save();
            }
        });
        // 부스 이동
        window.addEventListener("mouseup", e => {
            if(e.which !== 1 || !moveTarget || !temp) return;

            let originX = -(offset[0] - temp[0]);
            let originY = -(offset[1] - temp[1]);

            if(!moveTarget.check()){
                moveTarget.x = originX;
                moveTarget.y = originY;
            }

            moveTarget.bl_x = this.px2bl(moveTarget.x);
            moveTarget.bl_y = this.px2bl(moveTarget.y);
            
            temp = null;
            moveTarget = null;

            this.app.save();
        });
    }

    /**
     * 기타 이벤트를 건다.
     */
    otherEvent(){
        window.addEventListener("resize", e => {
            this.calcSize();
        });
    }
};